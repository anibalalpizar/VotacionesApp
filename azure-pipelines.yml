# ====================================================================
# Pipeline de Integración Continua (CI) para VotacionesApp
# Curso: ISW-1411 Calidad del Software
# Plataforma: Azure DevOps
# Framework: .NET 8.x
# ====================================================================

# Trigger: El pipeline se ejecuta automáticamente después de cada commit (push) a la rama main
trigger:
  - main

# Pool: Define el agente de ejecución donde se ejecutará el pipeline
# Usando agente local self-hosted
pool:
  name: 'LocalPool'

# Variables globales del pipeline
variables:
  buildConfiguration: 'Release'  # Compilación en modo Release (optimizado para producción)
  dotnetVersion: '8.x'           # Versión del SDK de .NET a utilizar

# ====================================================================
# STEPS: Pasos secuenciales del pipeline CI
# ====================================================================
steps:

# --------------------------------------------------------------------
# PASO 1: Instalar el SDK de .NET
# --------------------------------------------------------------------
- task: UseDotNet@2
  displayName: '📦 Instalar .NET SDK $(dotnetVersion)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# --------------------------------------------------------------------
# PASO 2: Restaurar dependencias de TODA la solución
# --------------------------------------------------------------------
- script: |
    echo Restaurando dependencias...
    dotnet restore server/server.sln --verbosity normal
  displayName: '🔄 Restaurar dependencias (NuGet packages)'

# --------------------------------------------------------------------
# PASO 3: Compilar TODO el proyecto (incluyendo pruebas)
# --------------------------------------------------------------------
- script: |
    echo Compilando solución completa...
    dotnet build server/server.sln --configuration $(buildConfiguration) --no-restore
  displayName: '🔨 Compilar proyecto completo en modo $(buildConfiguration)'

# --------------------------------------------------------------------
# PASO 4: Ejecutar pruebas unitarias
# --------------------------------------------------------------------
- script: |
    echo Ejecutando pruebas unitarias...
    dotnet test server/UnitTests/UnitTests.csproj --no-build --configuration $(buildConfiguration) --logger trx --results-directory server/UnitTests/TestResults /p:CollectCoverage=false
  displayName: '🧪 Ejecutar pruebas unitarias'

# --------------------------------------------------------------------
# PASO 5: Ejecutar pruebas de integración
# --------------------------------------------------------------------
- script: |
    echo Ejecutando pruebas de integración...
    dotnet test server/IntegrationTest/IntegrationTest.csproj --no-build --configuration $(buildConfiguration) --logger trx --results-directory server/IntegrationTest/TestResults /p:CollectCoverage=false
  displayName: '🔗 Ejecutar pruebas de integración'

# --------------------------------------------------------------------
# PASO 7: Publicar resultados de pruebas unitarias
# --------------------------------------------------------------------
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas unitarias'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/UnitTests/TestResults/**/*.trx'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: false
    testRunTitle: 'Pruebas Unitarias - VotacionesApp'
  condition: succeededOrFailed()

# --------------------------------------------------------------------
# PASO 8: Publicar resultados de pruebas de integración
# --------------------------------------------------------------------
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas de integración'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/IntegrationTest/TestResults/**/*.trx'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: true
    testRunTitle: 'Pruebas de Integración - VotacionesApp'
  condition: succeededOrFailed()

# --------------------------------------------------------------------
# PASO 9: Publicar cobertura de código
# --------------------------------------------------------------------
- task: PublishCodeCoverageResults@2
  displayName: '📈 Publicar cobertura de código'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/TestResults/**/coverage.cobertura.xml'
    failIfCoverageEmpty: false
  condition: succeededOrFailed()

# --------------------------------------------------------------------
# PASO 10 (OPCIONAL): Publicar artefactos de compilación
# --------------------------------------------------------------------
- script: |
    echo Publicando artefactos compilados...
    dotnet publish server/server.sln --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/VotacionesApp --no-build
  displayName: '📦 Generar artefactos de publicación'
  condition: succeeded()

# --------------------------------------------------------------------
# PASO 11 (OPCIONAL): Publicar artefactos en Azure Pipelines
# --------------------------------------------------------------------
- task: PublishBuildArtifacts@1
  displayName: '☁️ Publicar artefactos en Azure DevOps'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/VotacionesApp'
    ArtifactName: 'VotacionesApp-$(Build.BuildId)'
    publishLocation: 'Container'
  condition: succeeded()
