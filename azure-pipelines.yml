# ====================================================================
# Pipeline de Integración Continua (CI) para VotacionesApp
# Curso: ISW-1411 Calidad del Software
# Plataforma: Azure DevOps
# Framework: .NET 8.x
# ====================================================================

# Trigger: El pipeline se ejecuta automáticamente después de cada commit (push) a la rama main
trigger:
  - main

# Pool: Define el agente de ejecución donde se ejecutará el pipeline
# Usando agente local self-hosted
pool:
  name: 'LocalPool'

# Variables globales del pipeline
variables:
  buildConfiguration: 'Release'  # Compilación en modo Release (optimizado para producción)
  dotnetVersion: '8.x'           # Versión del SDK de .NET a utilizar

# ====================================================================
# STEPS: Pasos secuenciales del pipeline CI
# ====================================================================
steps:

# --------------------------------------------------------------------
# PASO 1: Instalar el SDK de .NET
# --------------------------------------------------------------------
# Configura el entorno con la versión específica del SDK de .NET
- task: UseDotNet@2
  displayName: '📦 Instalar .NET SDK $(dotnetVersion)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# --------------------------------------------------------------------
# PASO 2: Restaurar dependencias del proyecto
# --------------------------------------------------------------------
# Descarga todos los paquetes NuGet necesarios para TODO el proyecto
# Esto asegura que los archivos project.assets.json se generen correctamente
- script: |
    cd server
    dotnet restore --verbosity normal
  displayName: '🔄 Restaurar dependencias (NuGet packages)'

# --------------------------------------------------------------------
# PASO 3: Compilar TODO el proyecto (incluyendo pruebas)
# --------------------------------------------------------------------
# Compila toda la solución incluyendo los proyectos de pruebas
# Esto genera los binarios en modo Release para todos los proyectos
- script: |
    cd server
    dotnet build --configuration $(buildConfiguration) --no-restore
  displayName: '🔨 Compilar proyecto completo en modo $(buildConfiguration)'

# --------------------------------------------------------------------
# PASO 4: Ejecutar pruebas unitarias
# --------------------------------------------------------------------
# Ejecuta las pruebas unitarias compilando si es necesario
# Genera reporte .trx y datos de cobertura de código
- script: |
    cd server/UnitTests
    dotnet test --configuration $(buildConfiguration) --logger trx --results-directory TestResults --collect:"XPlat Code Coverage"
  displayName: '🧪 Ejecutar pruebas unitarias'

# --------------------------------------------------------------------
# PASO 5: Ejecutar pruebas de integración
# --------------------------------------------------------------------
# Ejecuta las pruebas de integración compilando si es necesario
# Genera reporte .trx y datos de cobertura de código
- script: |
    cd server/IntegrationTest
    dotnet test --configuration $(buildConfiguration) --logger trx --results-directory TestResults --collect:"XPlat Code Coverage"
  displayName: '🔗 Ejecutar pruebas de integración'

# --------------------------------------------------------------------
# PASO 6: DEBUG - Explorar estructura de archivos
# --------------------------------------------------------------------
# Este paso ayuda a diagnosticar problemas mostrando qué archivos se generaron
- script: |
    echo === Directorio de trabajo actual ===
    cd
    echo.
    echo === Contenido de server/UnitTests/TestResults ===
    dir server\UnitTests\TestResults /s 2>nul || echo No existe el directorio
    echo.
    echo === Contenido de server/IntegrationTest/TestResults ===
    dir server\IntegrationTest\TestResults /s 2>nul || echo No existe el directorio
    echo.
    echo === Buscando TODOS los archivos .trx ===
    where /r server *.trx 2>nul || echo No se encontraron archivos .trx
    echo.
    echo === Buscando TODOS los archivos de cobertura ===
    where /r server *coverage*.xml 2>nul || echo No se encontraron archivos de cobertura
  displayName: '🔍 DEBUG - Explorar archivos generados'
  condition: always()

# --------------------------------------------------------------------
# PASO 7: Publicar resultados de pruebas unitarias
# --------------------------------------------------------------------
# Publica los resultados de las pruebas unitarias en Azure DevOps
# Estos se pueden visualizar en la pestaña "Tests" del pipeline
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas unitarias'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/UnitTests/TestResults/**/*.trx'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: true
    testRunTitle: 'Pruebas Unitarias - VotacionesApp'
  condition: succeededOrFailed()

# --------------------------------------------------------------------
# PASO 8: Publicar resultados de pruebas de integración
# --------------------------------------------------------------------
# Publica los resultados de las pruebas de integración en Azure DevOps
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas de integración'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/IntegrationTest/TestResults/**/*.trx'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: true
    testRunTitle: 'Pruebas de Integración - VotacionesApp'
  condition: succeededOrFailed()

# --------------------------------------------------------------------
# PASO 9: Publicar cobertura de código
# --------------------------------------------------------------------
# Publica los reportes de cobertura de código en Azure DevOps
# Esto permite visualizar qué porcentaje del código está cubierto por pruebas
- task: PublishCodeCoverageResults@2
  displayName: '📈 Publicar cobertura de código'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/TestResults/**/coverage.cobertura.xml'
    failIfCoverageEmpty: false
  condition: succeededOrFailed()

# --------------------------------------------------------------------
# PASO 10 (OPCIONAL): Publicar artefactos de compilación
# --------------------------------------------------------------------
# Genera los archivos binarios listos para despliegue
# Esto crea una versión publicable de la aplicación
- script: |
    cd server
    dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/VotacionesApp --no-build
  displayName: '📦 Generar artefactos de publicación'
  condition: succeeded()

# --------------------------------------------------------------------
# PASO 11 (OPCIONAL): Publicar artefactos en Azure Pipelines
# --------------------------------------------------------------------
# Sube los artefactos generados a Azure DevOps para su descarga o despliegue
- task: PublishBuildArtifacts@1
  displayName: '☁️ Publicar artefactos en Azure DevOps'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/VotacionesApp'
    ArtifactName: 'VotacionesApp-$(Build.BuildId)'
    publishLocation: 'Container'
  condition: succeeded()

# ====================================================================
# CAMBIOS REALIZADOS EN ESTA VERSIÓN:
# ====================================================================
# 1. ELIMINADOS los pasos de compilación individual de proyectos de pruebas
#    (Pasos 4 y 5 originales) porque causaban el error NETSDK1004
#
# 2. MODIFICADO dotnet test para que compile automáticamente si es necesario
#    Quitamos --no-build para evitar problemas de dependencias
#
# 3. MEJORADO el patrón de búsqueda de archivos .trx:
#    De: '**/UnitTests/TestResults/*.trx'
#    A:  '**/UnitTests/TestResults/**/*.trx'
#    Esto busca en todos los subdirectorios recursivamente
#
# 4. El restore ahora incluye --verbosity normal para mejor diagnóstico
#
# ====================================================================
# NOTAS ADICIONALES:
# ====================================================================
# 1. Este pipeline implementa "Shift Left Testing" al ejecutar pruebas
#    automáticamente en cada commit
#
# 2. failTaskOnFailedTests: true asegura que el pipeline falle si hay
#    pruebas que no pasan, manteniendo el "build verde"
#
# 3. Los reportes .trx se pueden visualizar en la pestaña "Tests" de
#    Azure DevOps después de cada ejecución
#
# 4. La cobertura de código ayuda a identificar áreas sin probar
#
# 5. Los artefactos permiten mantener un historial de versiones
#    compiladas y facilitan el despliegue continuo (CD)
#
# 6. condition: succeededOrFailed() permite que los reportes se publiquen
#    incluso si las pruebas fallan, para poder ver qué salió mal
# ====================================================================