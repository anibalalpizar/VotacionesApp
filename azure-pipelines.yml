trigger:
  - main

pool:
  name: 'LocalPool'

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '8.x'

steps:

# Install .NET SDK
- task: UseDotNet@2
  displayName: 'Install .NET SDK $(dotnetVersion)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore dependencies
- script: |
    echo Restoring dependencies...
    dotnet restore server/server.sln --verbosity normal
  displayName: 'Restore NuGet packages'

# Build solution
- script: |
    echo Building solution...
    dotnet build server/server.sln --configuration $(buildConfiguration) --no-restore
  displayName: 'Build solution in $(buildConfiguration) mode'

# Run unit tests
- script: |
    echo Running unit tests...
    dotnet test server/UnitTests/UnitTests.csproj --no-build --configuration $(buildConfiguration) --logger trx --results-directory server/UnitTests/TestResults
  displayName: 'Run unit tests'

# Run integration tests
- script: |
    echo Running integration tests...
    dotnet test server/IntegrationTest/IntegrationTest.csproj --no-build --configuration $(buildConfiguration) --logger trx --results-directory server/IntegrationTest/TestResults
  displayName: 'Run integration tests'

# Publish unit test results
- task: PublishTestResults@2
  displayName: 'Publish unit test results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/UnitTests/TestResults/**/*.trx'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: false
    testRunTitle: 'Unit Tests - VotacionesApp'
  condition: succeededOrFailed()

# Publish integration test results
- task: PublishTestResults@2
  displayName: 'Publish integration test results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/IntegrationTest/TestResults/**/*.trx'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: true
    testRunTitle: 'Integration Tests - VotacionesApp'
  condition: succeededOrFailed()

# Generate build artifacts (optional)
- script: |
    echo Generating artifacts...
    dotnet publish server/server.sln --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/VotacionesApp --no-build
  displayName: 'Generate build artifacts'
  condition: succeeded()

# Publish artifacts to Azure DevOps (optional)
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts to Azure DevOps'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/VotacionesApp'
    ArtifactName: 'VotacionesApp-$(Build.BuildId)'
    publishLocation: 'Container'
  condition: succeeded()